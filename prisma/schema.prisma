// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum FleetType {
  Corporate
  Rental
  Personal
}

enum RegistrationStatus {
  Active 
  Registered
  Decommissioned
}

enum EngineStatus {
   On 
   Off 
   Idle 
}

enum Severity {
  Low
  Medium
  High
  Critical
}

enum AlertType {
  SpeedViolation
  LowFuel
  Maintenance
  EngineStatus
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owner {
  ownerId Int @id @default(autoincrement()) @map("owner_id")
  name String 
  createdAt DateTime @default(now()) @map("created_at")
  fleets Fleet[] 

  @@map("owners")
}

model Fleet {
  fleetId Int @id @default(autoincrement()) @map("fleet_id")
  fleetType FleetType @map("fleet_type")
  ownerId Int @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")
  vehicles Vehicle[]

  owner Owner @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade)
  @@index([ownerId])
  @@map("fleets")
}

model Vehicle {
  vin Int @id 
  manufacturer String 
  model String 
  fleetId Int @map("fleet_id")
  registrationStatus RegistrationStatus @map("registration_status")
  createdAt DateTime @default(now()) @map("created_at")
  Telemetry Telemetry[]
  Alerts Alert[]

  fleet Fleet @relation(fields: [fleetId], references:[fleetId], onDelete: Cascade)
  @@index([fleetId])
  @@map("vehicles")
}

model Telemetry {
  telemetryId Int @id @default(autoincrement()) @map("telemetry_id")
  vin Int 
  latitude Float 
  longitude Float 
  speed Float
  engineStatus EngineStatus @map("engine_status")
  fuelLevel Float @map("fuel_level")
  odometerReading Float @map("odometer_reading")
  timestamp DateTime 
  createdAt DateTime @default(now()) @map("created_at")
  diagnosticCodes String? @map("diagnostic_codes")


  vehicle Vehicle @relation(fields: [vin], references: [vin], onDelete: Cascade)
  @@unique([vin,timestamp(sort:Desc)], name: "idx_vin_timestamp")
  @@index([vin],name:"idx_vin")
  @@map("telemetries")
}

model Alert {
  alertId Int @id @default(autoincrement()) @map("alert_id")
  vin Int 
  alertType AlertType @map("alert_type")
  severity Severity @map("severity")
  message String
  actualValue Float @map("actual_value")
  thresholdValue Float @map("threshold_value")
  createdAt DateTime @default(now()) @map("created_at")
  isResolved Boolean @default(false) @map("is_resolved")
  resolvedAt DateTime? @map("resolved_at")

  vehicle Vehicle @relation(fields: [vin], references: [vin], onDelete: Cascade)
  @@unique([alertType,severity,createdAt], name: "idx_alerttype_severity")
  @@map("alerts")
}
